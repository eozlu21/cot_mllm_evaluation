Using a slow image processor as `use_fast` is unset and a slow processor was saved with this model. `use_fast=True` will be the default behavior in v4.52, even if the model was saved with a slow processor. This will result in minor differences in outputs. You'll still be able to use a slow processor with `use_fast=False`.
Loading checkpoint shards:   0%|          | 0/5 [00:00<?, ?it/s]Loading checkpoint shards:  20%|██        | 1/5 [00:01<00:06,  1.52s/it]Loading checkpoint shards:  40%|████      | 2/5 [00:02<00:04,  1.45s/it]Loading checkpoint shards:  60%|██████    | 3/5 [00:04<00:03,  1.54s/it]Loading checkpoint shards:  80%|████████  | 4/5 [00:06<00:01,  1.55s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:06<00:00,  1.13s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:06<00:00,  1.30s/it]
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/home/havural24/cot_mllm_evaluation/main.py", line 50, in <module>
    main()
  File "/home/havural24/cot_mllm_evaluation/main.py", line 30, in main
    mllm = HuggingFaceMLLM(args.mllm_model)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "<string>", line 6, in __init__
  File "/home/havural24/cot_mllm_evaluation/cot_mllm_evaluation/mllm/huggingface.py", line 45, in __post_init__
    ).to(self.device)
      ^^^^^^^^^^^^^^^
  File "/home/havural24/micromamba/envs/temp_env/lib/python3.12/site-packages/transformers/modeling_utils.py", line 3698, in to
    return super().to(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/havural24/micromamba/envs/temp_env/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1355, in to
    return self._apply(convert)
           ^^^^^^^^^^^^^^^^^^^^
  File "/home/havural24/micromamba/envs/temp_env/lib/python3.12/site-packages/torch/nn/modules/module.py", line 915, in _apply
    module._apply(fn)
  File "/home/havural24/micromamba/envs/temp_env/lib/python3.12/site-packages/torch/nn/modules/module.py", line 915, in _apply
    module._apply(fn)
  File "/home/havural24/micromamba/envs/temp_env/lib/python3.12/site-packages/torch/nn/modules/module.py", line 915, in _apply
    module._apply(fn)
  [Previous line repeated 2 more times]
  File "/home/havural24/micromamba/envs/temp_env/lib/python3.12/site-packages/torch/nn/modules/module.py", line 942, in _apply
    param_applied = fn(param)
                    ^^^^^^^^^
  File "/home/havural24/micromamba/envs/temp_env/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1341, in convert
    return t.to(
           ^^^^^
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 26.00 MiB. GPU 0 has a total capacity of 44.45 GiB of which 19.31 MiB is free. Process 4112316 has 34.33 GiB memory in use. Including non-PyTorch memory, this process has 10.08 GiB memory in use. Of the allocated memory 9.69 GiB is allocated by PyTorch, and 142.72 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
srun: error: ai21: task 0: Exited with exit code 1
